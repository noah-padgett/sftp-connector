jags.params <- c(
# ability measurement model
"tau", "lambda", "theta",
# speed measurement parameters
"rho",  "icept", "prec.s", "sigma.ts",
# reliability
"reli.omega"
# misclassification parameters
,"gamma"
)
} else {
jags.params <- c(
"tau", "lambda", "theta",
"rho",  "icept", "prec.s", "sigma.ts",
"reli.omega"
)
}
jags.params
mydata <- list(
y = sim.data$y,
lrt = sim.data$logt,
N = nrow(sim.data$y),
nit=ncol(sim.data$y),
C = paravec[3],
tune = 50
)
?p.adjust
#run_model_par
# ===================================== #
# cond_1.R
# ===================================== #
# Padgett - Dissertation
# Created
#   on: 2021-11-14
#   by: R. Noah Padgett
# Last Editted
#   on: 2021-11-14
#   by: R. Noah Padgett
# ===================================== #
# Purpose: Run condition 1 of MC Sim.
#   Condition 1:
#	N 	= 500
#	N Items = 5
#	N Cat   = 5
#	Nrep 	= 100
# Have these conditions set up in env.
N_items = 5
N_persons = 500
N_rep = 100
# ===================================== #
# libraries
library(doParallel)
library(R2jags)
library(mvtnorm)
simulate_data_misclass <- function(paravec, tau=NULL){
# NOTE: tau is a matrix[J, C-1] of item threshold parameters that possibly vary over items
# useful functions
invlogit <- function(x) {exp(x)/(1+exp(x))}
logit <- function(x){log(x/(1-x))}
# Generating Data
N <- paravec[1] # number of respondents
J <- paravec[2] # number of items
C <- paravec[3] # number of response categories
# ========================= #
# latent person parameters
etaCor <- paravec[4] # correlation between ability and speediness
etasd <- paravec[5:6]
eta <- mvtnorm::rmvnorm(
N, mean = c(0, 0),
sigma = matrix(c(etasd[1], etasd[2]*etaCor,
etasd[2]*etaCor, etasd[2]**2),
ncol = 2))
eta0 <- matrix(eta[,1],nrow=1) # ability
eta1 <- matrix(eta[,2],nrow=1) # log speediness
# ========================= #
# item parameters
# item factor loadings
lambda <- matrix(rep(paravec[7], J), ncol=1)
# item latent residual variances
theta <- c(1 - lambda**2)
# item thresholds
if(is.null(tau)){
tau <- matrix(ncol=C-1, nrow=J)
for(c in 1:(C-1)){
if(c == 1){
tau[,1] <- runif(J, -1, -0.33)
}
if(c > 1){
tau[,c] <- tau[,c-1] + runif(J, 0.25, 1)
}
}
}
# latent item response
ystar <- lambda%*%eta0
ystar <- apply(ystar, 2, FUN = function(x){mvtnorm::rmvnorm(1, x, diag(theta, ncol=J, nrow=J))})
# response time parameters (copied from Molenaar et al. 2021)
nu <- matrix(rep(paravec[8], J), ncol=1)
sigma.ei <- matrix(rep(paravec[9], J), ncol=1)
rho1 <- paravec[10]
#rho2 <- 0
#delta <- 0
mulogt <- logt <- matrix(nrow=N, ncol=J)
i<-j <- 1
for(i in 1:N){
for(j in 1:J){
# obtain expected log response time
mulogt[i,j] <- nu[j, 1] - eta1[1,i] - rho1*abs( eta0[1,i] - sum(tau[j,])/length(tau[j,]) )
# sample observed log response time
# logRT ~ N(mulogt, sigma.ie)
logt[i,j] <- rnorm(1, mulogt[i,j], sqrt(sigma.ei[j,1]))
}
}
# construct missclassification
# based on latent response time (nu - eta1)
misclass.time.trans <- function(lrt, c, b, K, diagonal = FALSE){
if(c == b){
g <- 1/(1 + exp(-lrt))
if(diagonal == TRUE){
g <- 1
}
}
if(c != b){
g <- (1/(K-1))*(1-1/(1 + exp(-lrt)))
if(diagonal == TRUE){
g <- 0
}
}
g
}
gamma <- array(dim=c(N,J,C,C))
for(i in 1:N){for(j in 1:J){for(b in 1:C){for(c in 1:C){
gamma[i,j,b,c] <- misclass.time.trans(nu[j, 1] - eta1[1, i], b, c, C)
}}}}# end loops
pi <- pi.gte <- omega <- array(0,dim=c(N, J, C))
Y <- matrix(nrow=N, ncol=J)
i <- j <- c <- 1
for(i in 1:N){
for(j in 1:J){
# GRM model
for(c in 2:C){
# P(greater than or equal to category c > 1)
pi.gte[i,j,c] <- invlogit(ystar[j,i]-tau[j,(c-1)])
}
# P(greater than or equal to category 1)
pi.gte[i,j,1] <- 1
# equal to prob.
for(c in 1:(C-1)){
# P(greater equal to category c < C)
pi[i,j,c] <- pi.gte[i,j,c]-pi.gte[i,j,c+1]
}
# P(greater equal to category C)
pi[i,j,C] <- pi.gte[i,j,C]
# observed category prob (Pr(y=c))
for(c in 1:C){
for(ct in 1:C){
# sum over ct
omega[i,j,c] = omega[i,j,c] + gamma[i,j,ct,c]*pi[i,j,ct]
}
}
Y[i,j] <- sample(x=1:C, size=1, prob=omega[i,j,])
}
}
# true_values <- list(eta0, eta1, lambda, nu, sigma.ei, tau, mulogt, ystar, theta, gamma, omega)
# names(true_values) <- c("eta", "")
sim_data <- list(Y, logt)
names(sim_data) <- c("y", "logt")
return(sim_data)
}
call_fx <- function(con)
{
c<-con$c
i<-con$i
simulate_data_misclass <- con$fx_sim_dat
# get data
paravec <- c(
N=con$N, J = con$J, C = 5,
etaCor = .23, etasd1 = 1, etasd2 = sqrt(0.1),
lambda=0.9, nu=1.5, sigma.ei=0.25, rho1=0.1)
sTau <- matrix(
c(-2.5, -0.5, 1, 1.5,
-2, -0.5, 1.5, 2.25,
-2.25, -0.5, 1.5, 2.1,
-1.75, -0.5, 2, 2.5,
-1.75, -0.5, 1.75, 2.5),
ncol=paravec[3]-1, nrow=paravec[2], byrow=T
)
sim.data <- simulate_data_misclass(paravec, tau=sTau)
# Save parameters (ignore misclass on kodaik)
# rerun on Grant's computers to get these
jags.params <- c(
"tau", "lambda", "theta",
"rho",  "icept", "prec.s", "sigma.ts",
"reli.omega"
)
mydata <- list(
y = sim.data$y,
lrt = sim.data$logt,
N = nrow(sim.data$y),
nit=ncol(sim.data$y),
C = paravec[3],
tune = 50
)
# Run model
start_time = Sys.time()
model.fit <-  R2jags::jags(
model="/data/padgettn/full_model_test/full_model_ifa_w_misclass_rt_jags.txt"
, parameters.to.save = jags.params
, data=mydata
, n.chains = 4
, n.burnin = 1000
, n.iter = 2000
, n.thin = 2
, progress.bar = "none"
)
# extract summary information
sample.summary <- model.fit$BUGSoutput$summary
DIC <- model.fit$BUGSoutput$DIC
pD <- model.fit$BUGSoutput$pD
end_time = Sys.time()
# edit Sys.time output for later
elapsed_time <- difftime(end_time, start_time, units="mins")
start_time <- as.character(start_time)
end_time <- as.character(end_time)
save.sys.info = matrix(c(c, i, start_time, end_time, elapsed_time, DIC, pD), nrow=1)
save.samples <- as.data.frame(model.fit$BUGSoutput$sims.matrix)
# check for output directory
out.dir <- paste0("/data/padgettn/diss_sim_results/cond_",c,"/")
if(dir.exists(out.dir) == F){
dir.create(out.dir, showWarnings = FALSE, recursive = TRUE)
}
# save posterior draws
if(i == 1){
suppressWarnings(write.table(save.samples, paste0(out.dir, "sim_posterior_draws_cond_",c,"_iter_",i,".txt"),
sep="\t", col.names = T, row.names = T))
}
# Save posterior summary M, SD, quantiles
suppressWarnings(write.table(sample.summary, paste0(out.dir, "sim_summary_cond_",c,"_iter_",i,".txt"),
sep="\t",append=T, col.names = T, row.names = T))
# save model estimation information
suppressWarnings(write.table(save.sys.info, paste0(out.dir, "sim_run_info_cond_",c,".txt"),
sep="\t", append=T, col.names = F))
return(save.sys.info)
}
# Set up Condition 1
CON <- list(
rep(list(c=1,i=1, fx_sim_dat=simulate_data_misclass, N=N_persons, J=N_items), N_rep)
)
View(CON)
CON <- rep(
list(list(c=1,i=1, fx_sim_dat=simulate_data_misclass, N=N_persons, J=N_items)), N_rep)
View(CON)
for(i in 1:N_rep){
CON[[i]]$i = i
}
citation("R2jags")
citation("lavaan")
citation("blavaan")
print(citation("blavaan"), bibtex=T)
a<-(3, 0, T)
a<-c(3, 0, T)
b<-c(4, 0, F)
c<-(a|b)
c
median(c(4L, 5L, 10L))
type(median(c(4L, 5L, 10L)))
a <- c(1, 2)
names(a) <- c("a","b")
a[3]<-4
names(a)
library(tidyverse)
??mdy
lubridate::mdy("April 10, 2019")
?rename
?bias
??bias
?tolower
rename_with
?unite
reticulate::repl_python()
import ftplib
Y
Y
reticulate::repl_python()
import ftplib
install.packages("reticulate")
install.packages("reticulate")
reticulate::repl_python()
import ftplib
use_condaenv("r-reticulate")
library(reticulate)
conda_list()
use_condaenv("r-reticulate")
reticulate::repl_python()
import ftplib
conda_create("r-reticulate")
reticulate::repl_python()
import ftplib
server = ftplib.FTP()
server.connect('192.168.1.114',2001)
server.connect('192.168.1.114',21)
server.login('ftpTestUser','password')
server.dir()
?server.ntransfercmd
from paramiko import SSHClient
import paramiko
pip install scp
from paramiko import SSHClient
from scp import SCPClient
ssh = SSHClient()
ssh.load_system_host_keys()
ssh.connect('192.168.1.114')
ssh.connect('192.168.1.114',port=21,username="ftpTestUser",password="password")
scp.close()
ssh.connect('192.168.1.114',port=21,username="ftpTestUser",password="password")
import paramiko
ssh = paramiko.SSHClient()
ssh.connect('192.168.1.114',port=21,
username="ftpTestUser",
password="password")
ssh.connect('192.168.1.114',port=21)
ssh.load_host_keys(os.path.expanduser(os.path.join("~", ".ssh", "known_hosts")))
ssh.connect('192.168.1.114',
port=21,
username="ftpTestUser",
spassword="password")
ssh.connect('192.168.1.114',
port=21,
username="ftpTestUser",
password="password")
import paramiko
paramiko.util.log_to_file("paramiko.log")
# Open a transport
host,port = "192.168.1.114",21
transport = paramiko.Transport((host,port))
username,password = "ftpTestUser","password"
transport.connect(None,username,password)
sftp = paramiko.SFTPClient.from_transport(transport)
import ftplib
server = ftplib.FTP()
server.connect('192.168.1.114',21)
server.login('ftpTestUser','password')
# You don't have to print this, because this command itself prints dir contents
server.dir()
filename = 'lease.csv'
localfile = open(filename, 'wb')
ftp.retrbinary('RETR ' + filename, localfile.write, 1024)
server.retrbinary('RETR ' + filename, localfile.write, 1024)
server.quit()
localfile.close()
quit
setwd("C:/Users/noahp/Documents/GitHub/sftp-connector/ftp")
reticulate::repl_python()
import ftplib
server = ftplib.FTP()
server.connect('192.168.1.114',21)
server.login('ftpTestUser','password')
# You don't have to print this, because this command itself prints dir contents
server.dir()
filename = 'lease.csv'
import ftplib
server = ftplib.FTP()
server.connect('192.168.1.114',21)
server.login('ftpTestUser','password')
# You don't have to print this, because this command itself prints dir contents
server.dir()
def grabFile():
filename = 'lease.csv'
localfile = open(filename, 'wb')
ftp.retrbinary('RETR ' + filename, localfile.write, 1024)
ftp.quit()
localfile.close()
import ftplib
server = ftplib.FTP()
server.connect('192.168.1.114',21)
server.login('ftpTestUser','password')
# You don't have to print this, because this command itself prints dir contents
server.dir()
def grabFile():
filename = 'lease.csv'
localfile = open(filename, 'wb')
ftp.retrbinary('RETR ' + filename, localfile.write, 1024)
ftp.quit()
localfile.close()
grabFile()
import ftplib
ftp = ftplib.FTP()
ftp.connect('192.168.1.114',21)
ftp.login('ftpTestUser','password')
# You don't have to print this, because this command itself prints dir contents
ftp.dir()
def grabFile():
filename = 'lease.csv'
localfile = open(filename, 'wb')
ftp.retrbinary('RETR ' + filename, localfile.write, 1024)
ftp.quit()
localfile.close()
grabFile()
import os
import ftplib
import os
# set directory of local machine
localDir = "C:\Users\noahp\Documents\GitHub\sftp-connector\ftp"
os.chdir(localDir)
# set up FTP network information
ftp = ftplib.FTP()
ftp.connect('192.168.1.114',21)
ftp.login('ftpTestUser','password')
localDir = "C:\\Users\\noahp\\Documents\\GitHub\\sftp-connector\\ftp"
os.chdir(localDir)
# set up FTP network information
ftp = ftplib.FTP()
ftp.connect('192.168.1.114',21)
ftp.login('ftpTestUser','password')
# set up function to grad file
def grabFile(filename):
localfile = open(filename, 'wb')
ftp.retrbinary('RETR ' + filename, localfile.write, 1024)
ftp.quit()
localfile.close()
# run function
grabFile(filename='lease.csv')
grabFile(filename='NGL.csv')
grabFile(filename='shiptran.csv')
import ftplib
import os
# set directory of local machine
localDir = "C:\\Users\\noahp\\Documents\\GitHub\\sftp-connector\\ftp"
os.chdir(localDir)
# set up FTP network information
ftp = ftplib.FTP()
ftp.connect('192.168.1.114',21)
ftp.login('ftpTestUser','password')
# set up function to grad file
def grabFile(filename):
localfile = open(filename, 'wb')
ftp.retrbinary('RETR ' + filename, localfile.write, 1024)
ftp.quit()
localfile.close()
# run function
grabFile(filename='lease.csv')
grabFile(filename='NGL.csv')
grabFile(filename='shiptran.csv')
def grabFile(filename):
localfile = open(filename, 'wb')
ftp.retrbinary('RETR ' + filename, localfile.write, 1024)
ftp.quit()
localfile.close();
grabFile(filename='lease.csv')
grabFile(filename='NGL.csv')
def grabFile(filename):
localfile = open(filename, 'wb')
ftp.retrbinary('RETR ' + filename, localfile.write, 1024)
ftp.quit()
localfile.close()
return;
grabFile(filename='lease.csv')
grabFile(filename='NGL.csv')
grabFile(filename='shiptran.csv')
import ftplib
import os
# set directory of local machine
localDir = "C:\\Users\\noahp\\Documents\\GitHub\\sftp-connector\\ftp"
os.chdir(localDir)
# set up FTP network information
ftp = ftplib.FTP()
ftp.connect('192.168.1.114',21)
ftp.login('ftpTestUser','password')
# set up function to grad file
def grabFile(filename):
localfile = open(filename, 'wb')
ftp.retrbinary('RETR ' + filename, localfile.write, 1024)
localfile.close()
return;
# run function
grabFile(filename='lease.csv')
grabFile(filename='NGL.csv')
grabFile(filename='shiptran.csv')
# close ftp connection
ftp.quit()
with open("ftpLoginInformation.txt") as file:
lines = file.readlines()
lines[1]
lines[0]
with open("ftpLoginInformation.txt") as file:
lines = f.read().splitlines()
with open("ftpLoginInformation.txt") as file:
lines = file.read().splitlines()
# set up FTP network information
lines[0]
import ftplib
import os
# set directory of local machine
localDir = "C:\\Users\\noahp\\Documents\\GitHub\\sftp-connector\\ftp"
os.chdir(localDir)
# grab .txt file containing login information
with open("ftpLoginInformation.txt") as file:
loginInfo = file.read().splitlines()
# set up FTP network information
ftp = ftplib.FTP()
ftp.connect(loginInfo[0],int(loginInfo[1]))
ftp.login(loginInfo[2],loginInfo[3])
# set up function to grad file
def grabFile(filename):
localfile = open(filename, 'wb')
ftp.retrbinary('RETR ' + filename, localfile.write, 1024)
localfile.close()
return;
# run function
grabFile(filename='lease.csv')
grabFile(filename='NGL.csv')
grabFile(filename='shiptran.csv')
ftp.quit()
